#include <iostream>
#include <vector>

using namespace std;

// Function to check if a given cell is a mine or not
bool isMine(int row, int col, vector<vector<char>>& board)
{
    return (board[row][col] == '*');
}

// Function to count the number of mines in the adjacent cells
int countAdjacentMines(int row, int col, vector<vector<char>>& board)
{
    int count = 0;

    // Check all 8 adjacent cells for mines
    if (row > 0 && col > 0 && isMine(row - 1, col - 1, board)) // top-left
        count++;
    if (row > 0 && isMine(row - 1, col, board)) // top
        count++;
    if (row > 0 && col < board[0].size() - 1 && isMine(row - 1, col + 1, board)) // top-right
        count++;
    if (col < board[0].size() - 1 && isMine(row, col + 1, board)) // right
        count++;
    if (row < board.size() - 1 && col < board[0].size() - 1 && isMine(row + 1, col + 1, board)) // bottom-right
        count++;
    if (row < board.size() - 1 && isMine(row + 1, col, board)) // bottom
        count++;
    if (row < board.size() - 1 && col > 0 && isMine(row + 1, col - 1, board)) // bottom-left
        count++;
    if (col > 0 && isMine(row, col - 1, board)) // left
        count++;

    return count;
}

// Function to check if the board is valid or not
bool isValidBoard(vector<vector<char>>& board)
{
    // Check if the board is empty
    if (board.empty() || board[0].empty())
        return false;

    // Check if the board has only '*' and '.'
    for (int i = 0; i < board.size(); i++)
    {
        for (int j = 0; j < board[0].size(); j++)
        {
            if (board[i][j] != '*' && board[i][j] != '.')
                return false;
        }
    }

    return true;
}

// Function to check if the given board is a valid minesweeper board or not
bool isMinesweeperBoard(vector<vector<char>>& board)
{
    // Check if the board is valid or not
    if (!isValidBoard(board))
        return false;

    // Check if the number of mines is correct or not
    int numMines = 0;
    for (int i = 0; i < board.size(); i++)
    {
        for (int j = 0; j < board[0].size(); j++)
        {
            if (board[i][j] == '*')
                numMines++;
        }
    }

    // Check if the number of mines is correct
    if (numMines != 10)
        return false;

    // Check if the number of adjacent mines is correct or not
    for (int i = 0; i < board.size(); i++)
    {
        for (int j = 0; j < board[0].size(); j++)
        {
            if (board[i][j] != '*')
            {
                int count = countAdjacentMines(i, j, board);
                if (count != (board[i][j] - '0'))
                    return false;
            }
        }
    }

    return true;
}

int main()
{
    // Example board
    vector<vector<char>> board = {
        {'*', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.'}
    };

    // Check if the board is a valid minesweeper board or not
    if (isMinesweeperBoard(board))
        cout << "The board is a valid minesweeper board" << endl;
    else
        cout << "The board is not a valid minesweeper board" << endl;

    return 0;
}